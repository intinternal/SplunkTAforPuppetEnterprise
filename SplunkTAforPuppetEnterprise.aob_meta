{"sourcetype_builder": {"pe:events:extdetails": {"metadata": {"extractions_count": 0, "data_input_name": "puppet_enterprise_extended_details", "event_count": 0, "cims_count": 0}}, "pe:status": {"metadata": {"extractions_count": 0, "data_input_name": "puppet_enterprise_status", "event_count": 0, "cims_count": 0}}, "pe:aggdetails:certname": {"metadata": {"extractions_count": 0, "data_input_name": "puppet_enterprise_aggregate_details_by_certname", "event_count": 0, "cims_count": 0}}, "pe:factors": {"metadata": {"extractions_count": 0, "data_input_name": "puppet_enterprise_factors", "event_count": 0, "cims_count": 0}}, "pe:nodes": {"metadata": {"extractions_count": 0, "data_input_name": "puppet_enterprise_node_status", "event_count": 0, "cims_count": 0}}, "pe:aggdetails:resource": {"metadata": {"extractions_count": 0, "data_input_name": "puppet_enterprise_aggregate_by_resource", "event_count": 0, "cims_count": 0}}, "pe:aggdetails:classes": {"metadata": {"extractions_count": 0, "data_input_name": "puppet_enterprise_aggregate_details_by_classes", "event_count": 0, "cims_count": 0}}}, "field_extraction_builder": {"pe:events:extdetails": {"data_format": "json", "is_parsed": true}, "pe:status": {"data_format": "json", "is_parsed": true}, "pe:aggdetails:certname": {"data_format": "json", "is_parsed": true}, "pe:factors": {"data_format": "json", "is_parsed": true}, "pe:nodes": {"data_format": "json", "is_parsed": true}, "pe:aggdetails:resource": {"data_format": "json", "is_parsed": true}, "pe:aggdetails:classes": {"data_format": "json", "is_parsed": true}}, "global_settings_builder": {"global_settings": {"customized_settings": [{"name": "api_token", "default_value": "", "format_type": "password", "value": "", "required": true, "placeholder": "", "label": "api_token", "type": "password", "help_string": "Generate your API Key using the following command: curl -k -X POST -H 'Content-Type: application/json' -d '{\"login\": \"<YOUR PE USER NAME>\", \"password\": \"<YOUR PE PASSWORD>\", \"lifetime\": \"9Y\"}'"}], "log_settings": {"log_level": "DEBUG"}}}, "data_input_builder": {"datainputs": [{"use_basic_auth": false, "data_inputs_options": [{"name": "_rest_api_url", "value": "${server}:${port}/status/v1/services", "rest_header": false, "description": "url"}, {"name": "_rest_api_method", "value": "GET", "rest_header": false, "description": "method"}, {"name": "X-Authentication", "value": "${api_token}", "rest_header": true, "description": "X-Authentication"}, {"name": "_event_json_path_key", "value": "", "type": "event_json_path_key"}, {"name": "_ckpt_enable", "value": false, "type": "ckpt_enable"}, {"name": "_ckpt_var_name", "value": "", "type": "ckpt_var_name"}, {"name": "_ckpt_json_path_key", "value": "", "type": "ckpt_json_path_key"}, {"name": "_ckpt_initial_value", "value": "", "type": "ckpt_initial_value"}, {"name": "_ckpt_source_time_format", "value": "", "type": "ckpt_source_time_format"}, {"name": "_ckpt_target_time_format", "value": "", "type": "ckpt_target_time_format"}, {"name": "server", "required_on_edit": false, "default_value": "", "format_type": "text", "placeholder": "https://puppetenterprise.domain.com", "title": "Server", "type": "customized_var", "description": "Input your Puppet Enterprise Server", "required_on_create": true}, {"name": "port", "required_on_edit": false, "default_value": "8081", "format_type": "text", "placeholder": "8081", "title": "Port", "type": "customized_var", "description": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)", "required_on_create": true}], "parameters": [{"name": "server", "default_value": "", "format_type": "text", "value": "", "required": true, "placeholder": "https://puppetenterprise.domain.com", "label": "Server", "type": "text", "help_string": "Input your Puppet Enterprise Server"}, {"name": "port", "default_value": "8081", "format_type": "text", "value": "8081", "required": true, "placeholder": "8081", "label": "Port", "type": "text", "help_string": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)"}], "type": "rest", "description": "Puppet Enterprise Server Metrics", "index": "default", "customized_options": [{"name": "server", "value": "https://ec2-54-202-235-132.us-west-2.compute.amazonaws.com"}, {"name": "port", "value": "8081"}], "name": "puppet_enterprise_status", "title": "Puppet Enterprise Status", "interval": "60", "sourcetype": "pe:status", "streaming_mode_xml": true, "uuid": "43e95dcc0dd04f8d91de0397dbae59f2", "use_external_validation": true}, {"data_inputs_options": [{"name": "server", "required_on_edit": false, "default_value": "", "format_type": "text", "placeholder": "", "title": "Server", "type": "customized_var", "description": "Input your Puppet Enterprise Server", "required_on_create": true}, {"name": "port", "required_on_edit": false, "default_value": "8081", "format_type": "text", "placeholder": "", "title": "Port", "type": "customized_var", "description": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)", "required_on_create": true}], "parameters": [{"name": "server", "default_value": "", "format_type": "text", "value": "", "required": true, "placeholder": "", "label": "Server", "type": "text", "help_string": "Input your Puppet Enterprise Server"}, {"name": "port", "default_value": "8081", "format_type": "text", "value": "8081", "required": true, "placeholder": "", "label": "Port", "type": "text", "help_string": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)"}], "type": "customized", "description": "Puppet Enterprise event details pulled by Aggregate Details Pulled by start and end date.", "index": "default", "customized_options": [{"name": "server", "value": "https://ec2-54-202-235-132.us-west-2.compute.amazonaws.com"}, {"name": "port", "value": "8081"}], "name": "puppet_enterprise_extended_details", "title": "Puppet Enterprise Extended Details", "interval": "60", "sourcetype": "pe:events:extdetails", "streaming_mode_xml": true, "uuid": "ef8ab0c69fd340788ddf8f2b610d7cf6", "use_external_validation": true, "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport jsonpath_rw\nfrom datetime import datetime\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef collect_events(helper, ew):\n   \n    import datetime\n    import json\n    import jsonpath_rw\n    \n    method = 'GET'\n    api_request = 'application/json' \n    \n    api_token = helper.get_global_setting(\"api_token\")\n    server = helper.get_arg('server')\n    port = helper.get_arg('port')\n    \n    #get current time\n    now = datetime.datetime.now()\n    \n    #get checkpoint value\n    ckpt = \"start_time\"\n    ckpt_value = helper.get_check_point(ckpt)\n\n    #if there is no checkpoint value - that means its an initial load - set start time to now - 5 Minute\n    if ckpt_value == None:\n        old = now - datetime.timedelta(minutes=5)\n        #format the time\n        # This is a timestamp in UTC-based ISO-8601 format (YYYY-MM-DDThh:mm:ssZ) \n        start_time = old.strftime(\"%Y-%m-%dT%H:%M:%SZ\") \n    #if it does exist then checkpoint value is start time\n    else:\n        start_time=ckpt_value\n\n    end_time=now.strftime(\"%Y-%m-%dT%H:%M:%SZ\") \n\n    \n    url = server + \":\" + port + \"/pdb/query/v4/events?query=[\\\"and\\\", [\\\"<\\\", \\\"timestamp\\\", \\\"\" + end_time + \"\\\"], [\\\">\\\", \\\"timestamp\\\", \\\"\" + start_time  + \"\\\"]]\"\n    \n    headers = {\n           'X-Authentication': api_token, \n           'Content-type': api_request\n           }\n           \n    response = helper.send_http_request(url, \n                                        method, \n                                        parameters=None, \n                                        payload=None,\n                                        headers=headers, \n                                        cookies=None, \n                                        verify=False, \n                                        cert=None,\n                                        timeout=None, \n                                        use_proxy=True)\n     \n    r_status = response.status_code\n    response.raise_for_status()\n    helper.log_error (response.text) \n    \n    r= response.json()\n     \n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        \n        for one_dict in r:\n            data = json.dumps(one_dict,sort_keys=False)\n        \n            event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper .get_sourcetype(stanza_name), data=data)\n            helper.log_error (response.text) \n            try:\n                ew.write_event(event)\n                helper.log_error (response.text) \n            except Exception as e:\n                raise e\n        return;\n    \n    #save checkpoint value to end_time which is data collection time\n    ckpt_value = helper.save_check_point(ckpt, end_time)"}, {"data_inputs_options": [{"name": "server", "required_on_edit": false, "default_value": "", "format_type": "text", "placeholder": "", "title": "Server", "type": "customized_var", "description": "Input your Puppet Enterprise Server", "required_on_create": true}, {"name": "port", "required_on_edit": false, "default_value": "8081", "format_type": "text", "placeholder": "8081", "title": "Port", "type": "customized_var", "description": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)", "required_on_create": true}, {"name": "summarize_by", "required_on_edit": false, "default_value": "certname", "format_type": "text", "placeholder": "certname", "title": "Summarize By", "type": "customized_var", "description": "Summarize by Type of Value (Certname, Classes or Resources)", "required_on_create": true}], "parameters": [{"name": "server", "default_value": "", "format_type": "text", "value": "", "required": true, "placeholder": "", "label": "Server", "type": "text", "help_string": "Input your Puppet Enterprise Server"}, {"name": "port", "default_value": "8081", "format_type": "text", "value": "8081", "required": true, "placeholder": "8081", "label": "Port", "type": "text", "help_string": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)"}, {"name": "summarize_by", "default_value": "certname", "format_type": "text", "value": "certname", "required": true, "placeholder": "certname", "label": "Summarize By", "type": "text", "help_string": "Summarize by Type of Value (Certname, Classes or Resources)"}], "type": "customized", "description": "Puppet Enterprise Aggregate Details by CertName.", "index": "default", "customized_options": [{"name": "server", "value": "https://ec2-54-202-235-132.us-west-2.compute.amazonaws.com"}, {"name": "port", "value": "8081"}, {"name": "summarize_by", "value": "certname"}], "name": "puppet_enterprise_aggregate_details_by_certname", "title": "Puppet Enterprise Aggregate Details by Certname", "interval": "30", "sourcetype": "pe:aggdetails:certname", "streaming_mode_xml": true, "uuid": "b5a493fbd4e146b5ae90fe3d615031a2", "use_external_validation": true, "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport jsonpath_rw\nfrom datetime import datetime\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef collect_events(helper, ew):\n   \n    import datetime\n    import json\n    import jsonpath_rw\n    \n    method = 'GET'\n    api_request = 'application/json' \n    \n    api_token = helper.get_global_setting(\"api_token\")\n    server = helper.get_arg('server')\n    port = helper.get_arg('port')\n    summarize_by = helper.get_arg('summarize_by')\n    \n    \n\n    \n    url = server + \":\" + port + \"/pdb/query/v4/aggregate-event-counts?summarize_by=\" + summarize_by\n    \n    headers = {\n           'X-Authentication': api_token, \n           'Content-type': api_request\n           }\n           \n    response = helper.send_http_request(url, \n                                        method, \n                                        parameters=None, \n                                        payload=None,\n                                        headers=headers, \n                                        cookies=None, \n                                        verify=False, \n                                        cert=None,\n                                        timeout=None, \n                                        use_proxy=True)\n     \n    r_status = response.status_code\n    response.raise_for_status()\n    helper.log_error (response.text) \n    \n    r= response.json()\n     \n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        \n        for one_dict in r:\n            data = json.dumps(one_dict,sort_keys=False)\n        \n            event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper .get_sourcetype(stanza_name), data=data)\n            helper.log_error (response.text) \n            try:\n                ew.write_event(event)\n                helper.log_error (response.text) \n            except Exception as e:\n                raise e\n        return;"}, {"data_inputs_options": [{"name": "server", "required_on_edit": false, "default_value": "", "format_type": "text", "placeholder": "", "title": "Server", "type": "customized_var", "description": "Input your Puppet Enterprise Server", "required_on_create": true}, {"name": "port", "required_on_edit": false, "default_value": "8081", "format_type": "text", "placeholder": "8081", "title": "Port", "type": "customized_var", "description": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)", "required_on_create": true}, {"name": "summarize_by", "required_on_edit": false, "default_value": "resource", "format_type": "text", "placeholder": "resources", "title": "Summarize By", "type": "customized_var", "description": "Puppet Enterprise Aggregate Details by Resource", "required_on_create": true}], "parameters": [{"name": "server", "default_value": "", "format_type": "text", "value": "https://ec2-54-202-235-132.us-west-2.compute.amazonaws.com", "required": true, "placeholder": "", "label": "Server", "type": "text", "help_string": "Input your Puppet Enterprise Server"}, {"name": "port", "default_value": "8081", "format_type": "text", "value": "8081", "required": true, "placeholder": "8081", "label": "Port", "type": "text", "help_string": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)"}, {"name": "summarize_by", "default_value": "resource", "format_type": "text", "value": "resource", "required": true, "placeholder": "resources", "label": "Summarize By", "type": "text", "help_string": "Puppet Enterprise Aggregate Details by Resource"}], "type": "customized", "description": "Puppet Enterprise Aggregate Details by Resource.", "index": "default", "customized_options": [{"name": "server", "value": "https://ec2-54-202-235-132.us-west-2.compute.amazonaws.com"}, {"name": "port", "value": "8081"}, {"name": "summarize_by", "value": "resource"}], "name": "puppet_enterprise_aggregate_by_resource", "title": "Puppet Enterprise Aggregate by Resource", "interval": "60", "sourcetype": "pe:aggdetails:resource", "streaming_mode_xml": true, "uuid": "b12dbcd8cf524b41ba8359fa38f92f1f", "use_external_validation": true, "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport jsonpath_rw\nfrom datetime import datetime\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef collect_events(helper, ew):\n   \n    import datetime\n    import json\n    import jsonpath_rw\n    \n    method = 'GET'\n    api_request = 'application/json' \n    \n    api_token = helper.get_global_setting(\"api_token\")\n    server = helper.get_arg('server')\n    port = helper.get_arg('port')\n    summarize_by = helper.get_arg('summarize_by')\n    \n    \n\n    \n    url = server + \":\" + port + \"/pdb/query/v4/aggregate-event-counts?summarize_by=\" + summarize_by\n    \n    headers = {\n           'X-Authentication': api_token, \n           'Content-type': api_request\n           }\n           \n    response = helper.send_http_request(url, \n                                        method, \n                                        parameters=None, \n                                        payload=None,\n                                        headers=headers, \n                                        cookies=None, \n                                        verify=False, \n                                        cert=None,\n                                        timeout=None, \n                                        use_proxy=True)\n     \n    r_status = response.status_code\n    response.raise_for_status()\n    helper.log_error (response.text) \n    \n    r= response.json()\n     \n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        \n        for one_dict in r:\n            data = json.dumps(one_dict,sort_keys=False)\n        \n            event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper .get_sourcetype(stanza_name), data=data)\n            helper.log_error (response.text) \n            try:\n                ew.write_event(event)\n                helper.log_error (response.text) \n            except Exception as e:\n                raise e\n        return;"}, {"data_inputs_options": [{"name": "server", "required_on_edit": false, "default_value": "", "format_type": "text", "placeholder": "", "title": "Server", "type": "customized_var", "description": "Input your Puppet Enterprise Server", "required_on_create": true}, {"name": "port", "required_on_edit": false, "default_value": "8081", "format_type": "text", "placeholder": "8081", "title": "Port", "type": "customized_var", "description": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)", "required_on_create": true}, {"name": "summarize_by", "required_on_edit": false, "default_value": "containing_class", "format_type": "text", "placeholder": "containing_class", "title": "Summarize By", "type": "customized_var", "description": "Summarize by Type of Value (Certname, Classes or Resources)", "required_on_create": true}], "parameters": [{"name": "server", "default_value": "", "format_type": "text", "value": "https://ec2-54-202-235-132.us-west-2.compute.amazonaws.com", "required": true, "placeholder": "", "label": "Server", "type": "text", "help_string": "Input your Puppet Enterprise Server"}, {"name": "port", "default_value": "8081", "format_type": "text", "value": "8081", "required": true, "placeholder": "8081", "label": "Port", "type": "text", "help_string": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)"}, {"name": "summarize_by", "default_value": "containing_class", "format_type": "text", "value": "containing_class", "required": true, "placeholder": "containing_class", "label": "Summarize By", "type": "text", "help_string": "Summarize by Type of Value (Certname, Classes or Resources)"}], "type": "customized", "description": "Puppet Enterprise Aggregate Details by Classes.", "index": "default", "customized_options": [{"name": "server", "value": "https://ec2-54-202-235-132.us-west-2.compute.amazonaws.com"}, {"name": "port", "value": "8081"}, {"name": "summarize_by", "value": "containing_class"}], "name": "puppet_enterprise_aggregate_details_by_classes", "title": "Puppet Enterprise Aggregate Details by Classes", "interval": "60", "sourcetype": "pe:aggdetails:classes", "streaming_mode_xml": true, "uuid": "1504408849894548929a2dd6f9a9789a", "use_external_validation": true, "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport jsonpath_rw\nfrom datetime import datetime\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef collect_events(helper, ew):\n   \n    import datetime\n    import json\n    import jsonpath_rw\n    \n    method = 'GET'\n    api_request = 'application/json' \n    \n    api_token = helper.get_global_setting(\"api_token\")\n    server = helper.get_arg('server')\n    port = helper.get_arg('port')\n    summarize_by = helper.get_arg('summarize_by')\n    \n    \n\n    \n    url = server + \":\" + port + \"/pdb/query/v4/aggregate-event-counts?summarize_by=\" + summarize_by\n    \n    headers = {\n           'X-Authentication': api_token, \n           'Content-type': api_request\n           }\n           \n    response = helper.send_http_request(url, \n                                        method, \n                                        parameters=None, \n                                        payload=None,\n                                        headers=headers, \n                                        cookies=None, \n                                        verify=False, \n                                        cert=None,\n                                        timeout=None, \n                                        use_proxy=True)\n     \n    r_status = response.status_code\n    response.raise_for_status()\n    helper.log_error (response.text) \n    \n    r= response.json()\n     \n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        \n        for one_dict in r:\n            data = json.dumps(one_dict,sort_keys=False)\n        \n            event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper .get_sourcetype(stanza_name), data=data)\n            helper.log_error (response.text) \n            try:\n                ew.write_event(event)\n                helper.log_error (response.text) \n            except Exception as e:\n                raise e\n        return;"}, {"data_inputs_options": [{"name": "server", "required_on_edit": false, "default_value": "", "format_type": "text", "placeholder": "", "title": "Server", "type": "customized_var", "description": "Input your Puppet Enterprise Server", "required_on_create": true}, {"name": "port", "required_on_edit": false, "default_value": "8081", "format_type": "text", "placeholder": "8081", "title": "Port", "type": "customized_var", "description": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)", "required_on_create": true}], "parameters": [{"name": "server", "default_value": "", "format_type": "text", "required": true, "value": "", "label": "Server", "type": "text", "placeholder": "", "help_string": "Input your Puppet Enterprise Server"}, {"name": "port", "default_value": "8081", "format_type": "text", "required": true, "value": "8081", "label": "Port", "type": "text", "placeholder": "8081", "help_string": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)"}], "type": "customized", "description": "Puppet Enterprise Node Status", "index": "default", "customized_options": [{"name": "server", "value": "https://ec2-54-202-235-132.us-west-2.compute.amazonaws.com"}, {"name": "port", "value": "8081"}], "name": "puppet_enterprise_node_status", "title": "Puppet Enterprise Node Status", "interval": "60", "sourcetype": "pe:nodes", "streaming_mode_xml": true, "uuid": "c600cd8ebb684fd68411afb3cf9d5281", "use_external_validation": true, "code": "# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport jsonpath_rw\nfrom datetime import datetime\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef collect_events(helper, ew):\n   \n    import datetime\n    import json\n    import jsonpath_rw\n    \n    method = 'GET'\n    api_request = 'application/json' \n    \n    api_token = helper.get_global_setting(\"api_token\")\n    server = helper.get_arg('server')\n    port = helper.get_arg('port')\n\n    \n    url = server + \":\" + port + \"/pdb/query/v4/nodes\"\n    \n    headers = {\n           'X-Authentication': api_token, \n           'Content-type': api_request\n           }\n           \n    response = helper.send_http_request(url, \n                                        method, \n                                        parameters=None, \n                                        payload=None,\n                                        headers=headers, \n                                        cookies=None, \n                                        verify=False, \n                                        cert=None,\n                                        timeout=None, \n                                        use_proxy=True)\n     \n    r_status = response.status_code\n    response.raise_for_status()\n    helper.log_error (response.text) \n    \n    r= response.json()\n     \n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        \n        for one_dict in r:\n            data = json.dumps(one_dict,sort_keys=False)\n        \n            event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper .get_sourcetype(stanza_name), data=data)\n            helper.log_error (response.text) \n            try:\n                ew.write_event(event)\n                helper.log_error (response.text) \n            except Exception as e:\n                raise e\n        return;"}, {"data_inputs_options": [{"name": "server", "required_on_edit": false, "default_value": "", "format_type": "text", "placeholder": "", "title": "Server", "type": "customized_var", "description": "Input your Puppet Enterprise Server", "required_on_create": true}, {"name": "port", "required_on_edit": false, "default_value": "8081", "format_type": "text", "placeholder": "8081", "title": "Port", "type": "customized_var", "description": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)", "required_on_create": true}, {"name": "environment", "required_on_edit": false, "default_value": "production", "format_type": "text", "placeholder": "production", "title": "Environment", "type": "customized_var", "description": "Puppet Enterprise Environment you want to monitor.", "required_on_create": true}], "parameters": [{"name": "server", "default_value": "", "format_type": "text", "required": true, "help_string": "Input your Puppet Enterprise Server", "label": "Server", "value": "https://ec2-54-202-235-132.us-west-2.compute.amazonaws.com", "placeholder": "", "type": "text"}, {"name": "port", "default_value": "8081", "format_type": "text", "required": true, "help_string": "Input your Puppet Enterprise DB Port (HTTPS 8081, HTTP: 8080)", "label": "Port", "value": "8081", "placeholder": "8081", "type": "text"}, {"name": "environment", "default_value": "production", "format_type": "text", "required": true, "help_string": "Puppet Enterprise Environment you want to monitor.", "label": "Environment", "value": "production", "placeholder": "production", "type": "text"}], "use_external_validation": true, "description": "Puppet Enterprise Factors from Puppet DB collected from Puppet Agents", "streaming_mode_xml": true, "index": "default", "customized_options": [{"name": "server", "value": "https://ec2-54-202-235-132.us-west-2.compute.amazonaws.com"}, {"name": "port", "value": "8081"}, {"name": "environment", "value": "production"}], "name": "puppet_enterprise_factors", "title": "Puppet Enterprise Factors", "interval": "60", "sourcetype": "pe:factors", "type": "customized", "uuid": "56804fce92274f6d9d9fc7a4ff4bb4ea", "sample_count": 0, "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport jsonpath_rw\nfrom datetime import datetime\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # server = definition.parameters.get('server', None)\n    # port = definition.parameters.get('port', None)\n    pass\n\ndef collect_events(helper, ew):\n   \n    import datetime\n    import json\n    import jsonpath_rw\n    \n    method = 'GET'\n    api_request = 'application/json' \n    \n    api_token = helper.get_global_setting(\"api_token\")\n    server = helper.get_arg('server')\n    port = helper.get_arg('port')\n    type_of_environment = helper.get_arg('environment')\n    \n  \n    \n    \n    url = server + \":\" + port + \"/pdb/query/v4/facts?query= [\\\"=\\\",\\\"environment\\\",\\\"\" + type_of_environment + \"\\\"]\"\n    \n    headers = {\n           'X-Authentication': api_token, \n           'Content-type': api_request\n           }\n           \n    response = helper.send_http_request(url, \n                                        method, \n                                        parameters=None, \n                                        payload=None,\n                                        headers=headers, \n                                        cookies=None, \n                                        verify=False, \n                                        cert=None,\n                                        timeout=None, \n                                        use_proxy=True)\n     \n    r_status = response.status_code\n    response.raise_for_status()\n    helper.log_error (response.text) \n    \n    r= response.json()\n     \n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        \n        for one_dict in r:\n            data = json.dumps(one_dict,sort_keys=False)\n        \n            event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper .get_sourcetype(stanza_name), data=data)\n            helper.log_error (response.text) \n            try:\n                ew.write_event(event)\n                helper.log_error (response.text) \n            except Exception as e:\n                raise e\n        return;\n    \n    #save checkpoint value to end_time which is data collection time\n    ckpt_value = helper.save_check_point(ckpt, end_time)"}]}, "basic_builder": {"theme": "#000000", "author": "Domnick Eger", "version": "1.0.7", "description": "The Splunk Add-on for Puppet Enterprise collects machine data from the use of the Puppet API. Add-on was tested with an HF installed on the Puppet Enterprise Server to collect metrics in near real-time fashion. Add-on can be used on a single Splunk instance and on a separate HF. The default port is 8080 for Puppet Enterprise, please make sure you have it open to your Splunk environment.", "friendly_name": "Splunk Add-on for Puppet Enterprise", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAABBElEQVRYR+2XPQ7CMAyFbU5BuQnXoBMbC6diYWNqz8FF+LlEZVQQVZumjqOYphLuGsv6+p7zkiAwH1XFiVv/rmH5OErqJDXIAtUbEjXZ3dk+kh7dzxlQQC6xZejYQj073bUYi9xaAwqpJ1YIEM6DZgSHbmfYLgvpDABagy23bCaopISlumgAcNVnTVUqCagF6eeRxpAnA01BsQ4TbrG8XX01KkAfqLF9k1BzAEUpZUChiDCFTCGPAlQVDeAwtbNte19aZwvGRR0dPpt+erjGWpEK09qsdh/SgFED0oKJA1raJd8eir4g457L2Z/SXPLmGWqG6I+BqvUldLV5Z0f53EvqJDUvIRnAJSEBe/gAAAAASUVORK5CYII=", "tab_version": "2.2.0", "large_icon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAACI0lEQVR4Xu2cQU7DMBBFZ6oC6h4WjbgQy7YSJ2DJJdhwAVYsuEAlWHOicAMoEcIooYWoUE88rms7+d3W48Yv/0/siV0mfKwEWMPHPBZ3xHStid0Z82Eu+PLlea997qEzABIgAhAA+fkMCoKCoCA/AgdXENMVz8qH/37XPBUGj3kAIrJOFAEIgMSkBwUJiAAIgH4IYCZ98HmQmMF2NEC5Q/ItrXhRTrR8Q8WlY7H1CHleqq5pMIDIUMWL8iTUgF37Vd2tICXX9pWbdOyWJqCE7KYC5CrT7fZmScc0Lt7FfhKwWxRANRizPJ/Q+PO1A6SoT7dogL4h1UqavhHxSAIV6+kWFdAvpG52oxHdSiBt3/OsvHGNjw7IyW6uo9tqr1FhEoBc7abllDUgJ7spCWUPKLTdegEopJJ6A6iBZHtFNGSLbcYOQFJ5CAqyE4KCoCBlJl2HQUFQEBTkRwAK8uOHHGThZ+7piM6Kyg/x3+heLDU616sV9LIHFBJOzTNrQI2tTqcrYrk+rRBPE5ItoNDK2QDNElBnOIaqwRXtXWyluftaK7bjohXtOyuHqOJ5vM0MUQB1hpPrq+fguzvWGo9lK2+LHQBQVFulDSgBWyUNKAVbpQooGVulCQjbgIVp22AA4TgUjkOJSxic9pEK6ra/poDFYDFYrEVAtZpHDvLJQaL+djQYzDwIgIQkDUAAJGogSMEMOQiLVVF51gZ9UpAfibyivwCmHthYPUjiJAAAAABJRU5ErkJggg==", "visible": true, "build_no": 3, "appname": "SplunkTAforPuppetEnterprise", "tab_build_no": "12"}, "validation": {"progress": 1.0, "validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "validation_id": "v_1522222392_38", "status": "job_finished"}}